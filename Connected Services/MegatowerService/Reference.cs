//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MegatowerWeb.MegatowerService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Name="Servizi MegaTowerSoap", Namespace="http://www.igesa.net/MegaTower", ConfigurationName="MegatowerService.ServiziMegaTowerSoap")]
    public interface ServiziMegaTowerSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetMonitor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetMonitor(string FromUser, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetMonitor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMonitorAsync(string FromUser, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetQueue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetQueue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetQueue", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetQueueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveModuloAttivato", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result RemoveModuloAttivato(int IDModulo, string CodiceCliente, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveModuloAttivato", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveModuloAttivatoAsync(int IDModulo, string CodiceCliente, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateCliente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpdateCliente(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateCliente", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateClienteAsync(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/BlockAction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result BlockAction(string FromUser, string ActionName, int[] IDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/BlockAction", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> BlockActionAsync(string FromUser, string ActionName, int[] IDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpDateAssegnazioni", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpDateAssegnazioni(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpDateAssegnazioni", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpDateAssegnazioniAsync(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveProgramma", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result RemoveProgramma(string CodProgramma, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveProgramma", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveProgrammaAsync(string CodProgramma, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpDateAsterisk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpDateAsterisk(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpDateAsterisk", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpDateAsteriskAsync(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateQueues", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpdateQueues(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateQueues", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateQueuesAsync(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAsterisk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAsterisk(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAsterisk", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAsteriskAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiSimilar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetInterventiSimilar(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiSimilar", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetInterventiSimilarAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiByContact", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetInterventiByContact(string Telefono, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiByContact", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInterventiByContactAsync(string Telefono, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventi", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetInterventi(string IDCliente, MegatowerWeb.MegatowerService.EnumInterventi Tipo, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventi", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInterventiAsync(string IDCliente, MegatowerWeb.MegatowerService.EnumInterventi Tipo, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiByCriteria", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetInterventiByCriteria(string Criteria, string[] ArrayValues, string[] ArrayTypes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiByCriteria", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInterventiByCriteriaAsync(string Criteria, string[] ArrayValues, string[] ArrayTypes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiByCriteriaEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetInterventiByCriteriaEx(string Criteria, string Sort, string Limit, string[] ArrayValues, string[] ArrayTypes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiByCriteriaEx", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInterventiByCriteriaExAsync(string Criteria, string Sort, string Limit, string[] ArrayValues, string[] ArrayTypes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiCountByCriteria", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetInterventiCountByCriteria(string Criteria, string[] ArrayValues, string[] ArrayTypes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiCountByCriteria", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetInterventiCountByCriteriaAsync(string Criteria, string[] ArrayValues, string[] ArrayTypes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiCountByCriteriaEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetInterventiCountByCriteriaEx(string Criteria, int Limit, string[] ArrayValues, string[] ArrayTypes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiCountByCriteriaEx", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetInterventiCountByCriteriaExAsync(string Criteria, int Limit, string[] ArrayValues, string[] ArrayTypes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiAperti", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetInterventiAperti(string IDCliente, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetInterventiAperti", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInterventiApertiAsync(string IDCliente, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetStatistiche", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetStatistiche(System.DateTime MinDate, System.DateTime MaxDate, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetStatistiche", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStatisticheAsync(System.DateTime MinDate, System.DateTime MaxDate, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetParkingXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetParkingXML();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetParkingXML", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetParkingXMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetParking", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetParking(string User, long IDDitta, System.DateTime DataOraModifica);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetParking", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetParkingAsync(string User, long IDDitta, System.DateTime DataOraModifica);
        
        // CODEGEN: Il parametro 'Bytes' richiede informazioni sullo schema aggiuntive che non possono essere acquisite utilizzando la modalità parametro. L'attributo specifico è 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/Certificate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.CertificateResponse Certificate(MegatowerWeb.MegatowerService.CertificateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/Certificate", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.CertificateResponse> CertificateAsync(MegatowerWeb.MegatowerService.CertificateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetTipoInterventi", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTipoInterventi(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetTipoInterventi", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTipoInterventiAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetDettaglioInterventi", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetDettaglioInterventi(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetDettaglioInterventi", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDettaglioInterventiAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetTipoContatto", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTipoContatto(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetTipoContatto", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTipoContattoAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetTipoClienti", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTipoClienti(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetTipoClienti", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTipoClientiAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetTipoAttivita", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTipoAttivita(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetTipoAttivita", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTipoAttivitaAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetUser(string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetUser", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUserAsync(string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Login(string User, string CryptPassword, string SoftwareName, string SoftwareVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/Login", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> LoginAsync(string User, string CryptPassword, string SoftwareName, string SoftwareVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/Logout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Logout(string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/Logout", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> LogoutAsync(string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAreas", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAreas(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAreas", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAreasAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetUsers(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUsersAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetFile(long ID, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFile", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFileAsync(long ID, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFilesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetFilesList(string IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFilesList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFilesListAsync(string IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFilesListByIDCliente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetFilesListByIDCliente(string IDCliente, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFilesListByIDCliente", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFilesListByIDClienteAsync(string IDCliente, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFilesListByGuid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetFilesListByGuid(string GuidTicket, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFilesListByGuid", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFilesListByGuidAsync(string GuidTicket, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveFilesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result RemoveFilesList(int[] IDList, long IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveFilesList", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveFilesListAsync(int[] IDList, long IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateFilesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpdateFilesList(System.Data.DataSet dst, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateFilesList", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateFilesListAsync(System.Data.DataSet dst, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/AddIntervento", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result AddIntervento(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/AddIntervento", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> AddInterventoAsync(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpDateStatistiche", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpDateStatistiche(int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpDateStatistiche", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpDateStatisticheAsync(int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveRubrica", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result RemoveRubrica(string Telefono, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveRubrica", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveRubricaAsync(string Telefono, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/AddRubrica", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result AddRubrica(string FromUser, string OldTelefono, string Telefono, string IDCliente, string Riferimento, int IDTipoContatto, string Titolo, string Nome, string Cognome);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/AddRubrica", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> AddRubricaAsync(string FromUser, string OldTelefono, string Telefono, string IDCliente, string Riferimento, int IDTipoContatto, string Titolo, string Nome, string Cognome);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetActivitiesByCodProgramma", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetActivitiesByCodProgramma(string IDProgramma, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetActivitiesByCodProgramma", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetActivitiesByCodProgrammaAsync(string IDProgramma, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateActivities", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpdateActivities(System.Data.DataSet Bytes, string FromUser, bool AutoAssign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateActivities", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateActivitiesAsync(System.Data.DataSet Bytes, string FromUser, bool AutoAssign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveActivity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result RemoveActivity(long ID, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveActivity", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveActivityAsync(long ID, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetActivitiesByIDHotline", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetActivitiesByIDHotline(long IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetActivitiesByIDHotline", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetActivitiesByIDHotlineAsync(long IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetActivitiesByGuid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetActivitiesByGuid(string GuidTicket, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetActivitiesByGuid", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetActivitiesByGuidAsync(string GuidTicket, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetRubrica", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetRubrica(string Telefono, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetRubrica", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRubricaAsync(string Telefono, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetMailTemplates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetMailTemplates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetMailTemplates", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMailTemplatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetClienti", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetClienti(string Target, string FromUser, long IDDitta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetClienti", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClientiAsync(string Target, string FromUser, long IDDitta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetCompetenze", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCompetenze(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetCompetenze", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompetenzeAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetModuli", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetModuli(string FromUser, string IDCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetModuli", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetModuliAsync(string FromUser, string IDCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetModuliByIDProdotto", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetModuliByIDProdotto(string FromUser, string IDProdotto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetModuliByIDProdotto", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetModuliByIDProdottoAsync(string FromUser, string IDProdotto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetModuliByCliente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetModuliByCliente(string IDCliente, string IDClienteContabile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetModuliByCliente", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetModuliByClienteAsync(string IDCliente, string IDClienteContabile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetModuliByClienteOrModulo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetModuliByClienteOrModulo(string IDCliente, string IDClienteContabile, int IDModulo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetModuliByClienteOrModulo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetModuliByClienteOrModuloAsync(string IDCliente, string IDClienteContabile, int IDModulo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetRubricaByCliente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetRubricaByCliente(string IDCliente, string IDClienteContabile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetRubricaByCliente", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRubricaByClienteAsync(string IDCliente, string IDClienteContabile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetCliente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCliente(string IDCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetCliente", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClienteAsync(string IDCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetClienteFull", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetClienteFull(string IDCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetClienteFull", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClienteFullAsync(string IDCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAssegnazioni", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAssegnazioni(long IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAssegnazioni", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAssegnazioniAsync(long IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAssegnazione", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAssegnazione(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAssegnazione", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAssegnazioneAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetProdotti", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetProdotti(string FromUser, int IDModulo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetProdotti", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetProdottiAsync(string FromUser, int IDModulo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveHotline", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result RemoveHotline(long IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveHotline", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveHotlineAsync(long IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetBookingLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetBookingLog(int IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetBookingLog", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBookingLogAsync(int IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetVisibilita", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetVisibilita(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetVisibilita", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetVisibilitaAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetClientiCommerciale", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetClientiCommerciale(string FromUser, string Filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetClientiCommerciale", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClientiCommercialeAsync(string FromUser, string Filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetBooking", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetBooking(string FromUser, long IDDitta, System.DateTime MinDate, System.DateTime MaxDate, string[] ListUsers, System.DateTime DataOraModifica);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetBooking", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetBookingAsync(string FromUser, long IDDitta, System.DateTime MinDate, System.DateTime MaxDate, string[] ListUsers, System.DateTime DataOraModifica);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFolders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetFolders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFolders", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFoldersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetCausaStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCausaStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetCausaStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCausaStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetApplicativi", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetApplicativi(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetApplicativi", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetApplicativiAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/AssignHotline", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result AssignHotline(long IDHotline, string FromUser, string ToArea, string ToUser, System.DateTime DateTime, double OrePreviste, string Descrizione, long Alarm, long RememberMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/AssignHotline", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> AssignHotlineAsync(long IDHotline, string FromUser, string ToArea, string ToUser, System.DateTime DateTime, double OrePreviste, string Descrizione, long Alarm, long RememberMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/ScheduleAssignHotline", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result ScheduleAssignHotline(long ID, string FromUser, long Alarm, long RememberMinutes, string IPAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/ScheduleAssignHotline", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> ScheduleAssignHotlineAsync(long ID, string FromUser, long Alarm, long RememberMinutes, string IPAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/ChangeAssignHotline", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result ChangeAssignHotline(long ID, string FromUser, string ToArea, string ToUser, System.DateTime DateTime, double OrePreviste, string Descrizione, long Alarm, long RememberMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/ChangeAssignHotline", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> ChangeAssignHotlineAsync(long ID, string FromUser, string ToArea, string ToUser, System.DateTime DateTime, double OrePreviste, string Descrizione, long Alarm, long RememberMinutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveAssignHotline", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result RemoveAssignHotline(long ID, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RemoveAssignHotline", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveAssignHotlineAsync(long ID, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFiliazione", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetFiliazione(long IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFiliazione", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFiliazioneAsync(long IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAsk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAsk();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAsk", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAskAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAnswer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAnswer(int IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAnswer", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAnswerAsync(int IDHotline, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAnswerByGuid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAnswerByGuid(string GuidTicket, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetAnswerByGuid", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAnswerByGuidAsync(string GuidTicket, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateAnswer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpdateAnswer(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateAnswer", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateAnswerAsync(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFoldersHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetFoldersHistory(int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetFoldersHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFoldersHistoryAsync(int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetCausaStatusHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCausaStatusHistory(int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetCausaStatusHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCausaStatusHistoryAsync(int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetIntervento", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetIntervento(string ID, long IDAssegnazione, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetIntervento", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInterventoAsync(string ID, long IDAssegnazione, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetNewIntervento", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetNewIntervento(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetNewIntervento", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetNewInterventoAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/SwitchIntervento", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result SwitchIntervento(string FromUser, string ToUser, string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/SwitchIntervento", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> SwitchInterventoAsync(string FromUser, string ToUser, string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetSwitchLocked", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetSwitchLocked(string FromUser, long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetSwitchLocked", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSwitchLockedAsync(string FromUser, long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/LockIntervento", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result LockIntervento(string FromUser, string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/LockIntervento", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> LockInterventoAsync(string FromUser, string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UnlockIntervento", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UnlockIntervento(string FromUser, string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UnlockIntervento", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UnlockInterventoAsync(string FromUser, string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/AddMonitor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result AddMonitor(string FromUser, string Key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/AddMonitor", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> AddMonitorAsync(string FromUser, string Key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateIntervento", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpdateIntervento(System.Data.DataSet ds, string FromUser, long IDAssegnazione);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateIntervento", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateInterventoAsync(System.Data.DataSet ds, string FromUser, long IDAssegnazione);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/CloseAssegnazione", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result CloseAssegnazione(long IDAssegnazione, long Tipo, string FromUser, string IndirizzoIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/CloseAssegnazione", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> CloseAssegnazioneAsync(long IDAssegnazione, long Tipo, string FromUser, string IndirizzoIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/ReorganizerAssegnazioni", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result ReorganizerAssegnazioni(string User, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/ReorganizerAssegnazioni", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> ReorganizerAssegnazioniAsync(string User, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/ReorganizerAssegnazioniUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result ReorganizerAssegnazioniUsers(string[] ListUsers, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/ReorganizerAssegnazioniUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> ReorganizerAssegnazioniUsersAsync(string[] ListUsers, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetPriorities", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPriorities(string FromUser, int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetPriorities", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPrioritiesAsync(string FromUser, int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetResource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetResource(int ID, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetResource", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetResourceAsync(int ID, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateResource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpdateResource(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateResource", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateResourceAsync(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetViste", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetViste(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetViste", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetVisteAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateViste", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result UpdateViste(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/UpdateViste", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateVisteAsync(System.Data.DataSet Bytes, string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RecalcPriority", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result RecalcPriority(string FromUser, int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/RecalcPriority", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RecalcPriorityAsync(string FromUser, int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetLivelli", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetLivelli(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetLivelli", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLivelliAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetKeyWords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetKeyWords(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetKeyWords", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetKeyWordsAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetDitte", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetDitte(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetDitte", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDitteAsync(string FromUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/SendEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MegatowerWeb.MegatowerService.Result SendEmail(string FromUser, MegatowerWeb.MegatowerService.MegaMessage Message, int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/SendEmail", ReplyAction="*")]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> SendEmailAsync(string FromUser, MegatowerWeb.MegatowerService.MegaMessage Message, int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetDocumenti", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetDocumenti(string FromUser, int IDHotline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.igesa.net/MegaTower/GetDocumenti", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDocumentiAsync(string FromUser, int IDHotline);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.igesa.net/MegaTower")]
    public partial class Result : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool isErrorField;
        
        private string descriptionField;
        
        private string tagField;
        
        private long recordsAffectedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IsError {
            get {
                return this.isErrorField;
            }
            set {
                this.isErrorField = value;
                this.RaisePropertyChanged("IsError");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
                this.RaisePropertyChanged("Tag");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public long RecordsAffected {
            get {
                return this.recordsAffectedField;
            }
            set {
                this.recordsAffectedField = value;
                this.RaisePropertyChanged("RecordsAffected");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.igesa.net/MegaTower")]
    public partial class MegaAttachment : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private byte[] contentsField;
        
        private int sizeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=1)]
        public byte[] Contents {
            get {
                return this.contentsField;
            }
            set {
                this.contentsField = value;
                this.RaisePropertyChanged("Contents");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
                this.RaisePropertyChanged("Size");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.igesa.net/MegaTower")]
    public partial class MegaMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool isBodyHtmlField;
        
        private bool confirmReadField;
        
        private string mailFromField;
        
        private string mailToField;
        
        private string mailCCField;
        
        private string mailCCNField;
        
        private string subjectField;
        
        private string bodyField;
        
        private MegaAttachment[] attachmentsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IsBodyHtml {
            get {
                return this.isBodyHtmlField;
            }
            set {
                this.isBodyHtmlField = value;
                this.RaisePropertyChanged("IsBodyHtml");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ConfirmRead {
            get {
                return this.confirmReadField;
            }
            set {
                this.confirmReadField = value;
                this.RaisePropertyChanged("ConfirmRead");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string MailFrom {
            get {
                return this.mailFromField;
            }
            set {
                this.mailFromField = value;
                this.RaisePropertyChanged("MailFrom");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string MailTo {
            get {
                return this.mailToField;
            }
            set {
                this.mailToField = value;
                this.RaisePropertyChanged("MailTo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string MailCC {
            get {
                return this.mailCCField;
            }
            set {
                this.mailCCField = value;
                this.RaisePropertyChanged("MailCC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string MailCCN {
            get {
                return this.mailCCNField;
            }
            set {
                this.mailCCNField = value;
                this.RaisePropertyChanged("MailCCN");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
                this.RaisePropertyChanged("Subject");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
                this.RaisePropertyChanged("Body");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=8)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public MegaAttachment[] Attachments {
            get {
                return this.attachmentsField;
            }
            set {
                this.attachmentsField = value;
                this.RaisePropertyChanged("Attachments");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.igesa.net/MegaTower")]
    public enum EnumInterventi {
        
        /// <remarks/>
        Aperti,
        
        /// <remarks/>
        Chiusi,
        
        /// <remarks/>
        Entrambi,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Certificate", WrapperNamespace="http://www.igesa.net/MegaTower", IsWrapped=true)]
    public partial class CertificateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.igesa.net/MegaTower", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Bytes;
        
        public CertificateRequest() {
        }
        
        public CertificateRequest(byte[] Bytes) {
            this.Bytes = Bytes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CertificateResponse", WrapperNamespace="http://www.igesa.net/MegaTower", IsWrapped=true)]
    public partial class CertificateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.igesa.net/MegaTower", Order=0)]
        public MegatowerWeb.MegatowerService.Result CertificateResult;
        
        public CertificateResponse() {
        }
        
        public CertificateResponse(MegatowerWeb.MegatowerService.Result CertificateResult) {
            this.CertificateResult = CertificateResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiziMegaTowerSoapChannel : MegatowerWeb.MegatowerService.ServiziMegaTowerSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiziMegaTowerSoapClient : System.ServiceModel.ClientBase<MegatowerWeb.MegatowerService.ServiziMegaTowerSoap>, MegatowerWeb.MegatowerService.ServiziMegaTowerSoap {
        
        public ServiziMegaTowerSoapClient() {
        }
        
        public ServiziMegaTowerSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiziMegaTowerSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiziMegaTowerSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiziMegaTowerSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MegatowerWeb.MegatowerService.Result HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public System.Data.DataSet GetMonitor(string FromUser, string Status) {
            return base.Channel.GetMonitor(FromUser, Status);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMonitorAsync(string FromUser, string Status) {
            return base.Channel.GetMonitorAsync(FromUser, Status);
        }
        
        public System.Data.DataSet GetQueue() {
            return base.Channel.GetQueue();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetQueueAsync() {
            return base.Channel.GetQueueAsync();
        }
        
        public MegatowerWeb.MegatowerService.Result RemoveModuloAttivato(int IDModulo, string CodiceCliente, string FromUser) {
            return base.Channel.RemoveModuloAttivato(IDModulo, CodiceCliente, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveModuloAttivatoAsync(int IDModulo, string CodiceCliente, string FromUser) {
            return base.Channel.RemoveModuloAttivatoAsync(IDModulo, CodiceCliente, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result UpdateCliente(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpdateCliente(Bytes, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateClienteAsync(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpdateClienteAsync(Bytes, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result BlockAction(string FromUser, string ActionName, int[] IDs) {
            return base.Channel.BlockAction(FromUser, ActionName, IDs);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> BlockActionAsync(string FromUser, string ActionName, int[] IDs) {
            return base.Channel.BlockActionAsync(FromUser, ActionName, IDs);
        }
        
        public MegatowerWeb.MegatowerService.Result UpDateAssegnazioni(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpDateAssegnazioni(Bytes, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpDateAssegnazioniAsync(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpDateAssegnazioniAsync(Bytes, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result RemoveProgramma(string CodProgramma, string FromUser) {
            return base.Channel.RemoveProgramma(CodProgramma, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveProgrammaAsync(string CodProgramma, string FromUser) {
            return base.Channel.RemoveProgrammaAsync(CodProgramma, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result UpDateAsterisk(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpDateAsterisk(Bytes, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpDateAsteriskAsync(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpDateAsteriskAsync(Bytes, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result UpdateQueues(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpdateQueues(Bytes, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateQueuesAsync(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpdateQueuesAsync(Bytes, FromUser);
        }
        
        public System.Data.DataSet GetAsterisk(string FromUser) {
            return base.Channel.GetAsterisk(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAsteriskAsync(string FromUser) {
            return base.Channel.GetAsteriskAsync(FromUser);
        }
        
        public System.Data.DataTable GetInterventiSimilar(long ID) {
            return base.Channel.GetInterventiSimilar(ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetInterventiSimilarAsync(long ID) {
            return base.Channel.GetInterventiSimilarAsync(ID);
        }
        
        public System.Data.DataSet GetInterventiByContact(string Telefono, string FromUser) {
            return base.Channel.GetInterventiByContact(Telefono, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInterventiByContactAsync(string Telefono, string FromUser) {
            return base.Channel.GetInterventiByContactAsync(Telefono, FromUser);
        }
        
        public System.Data.DataSet GetInterventi(string IDCliente, MegatowerWeb.MegatowerService.EnumInterventi Tipo, string FromUser) {
            return base.Channel.GetInterventi(IDCliente, Tipo, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInterventiAsync(string IDCliente, MegatowerWeb.MegatowerService.EnumInterventi Tipo, string FromUser) {
            return base.Channel.GetInterventiAsync(IDCliente, Tipo, FromUser);
        }
        
        public System.Data.DataSet GetInterventiByCriteria(string Criteria, string[] ArrayValues, string[] ArrayTypes, string FromUser) {
            return base.Channel.GetInterventiByCriteria(Criteria, ArrayValues, ArrayTypes, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInterventiByCriteriaAsync(string Criteria, string[] ArrayValues, string[] ArrayTypes, string FromUser) {
            return base.Channel.GetInterventiByCriteriaAsync(Criteria, ArrayValues, ArrayTypes, FromUser);
        }
        
        public System.Data.DataSet GetInterventiByCriteriaEx(string Criteria, string Sort, string Limit, string[] ArrayValues, string[] ArrayTypes, string FromUser) {
            return base.Channel.GetInterventiByCriteriaEx(Criteria, Sort, Limit, ArrayValues, ArrayTypes, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInterventiByCriteriaExAsync(string Criteria, string Sort, string Limit, string[] ArrayValues, string[] ArrayTypes, string FromUser) {
            return base.Channel.GetInterventiByCriteriaExAsync(Criteria, Sort, Limit, ArrayValues, ArrayTypes, FromUser);
        }
        
        public int GetInterventiCountByCriteria(string Criteria, string[] ArrayValues, string[] ArrayTypes, string FromUser) {
            return base.Channel.GetInterventiCountByCriteria(Criteria, ArrayValues, ArrayTypes, FromUser);
        }
        
        public System.Threading.Tasks.Task<int> GetInterventiCountByCriteriaAsync(string Criteria, string[] ArrayValues, string[] ArrayTypes, string FromUser) {
            return base.Channel.GetInterventiCountByCriteriaAsync(Criteria, ArrayValues, ArrayTypes, FromUser);
        }
        
        public int GetInterventiCountByCriteriaEx(string Criteria, int Limit, string[] ArrayValues, string[] ArrayTypes, string FromUser) {
            return base.Channel.GetInterventiCountByCriteriaEx(Criteria, Limit, ArrayValues, ArrayTypes, FromUser);
        }
        
        public System.Threading.Tasks.Task<int> GetInterventiCountByCriteriaExAsync(string Criteria, int Limit, string[] ArrayValues, string[] ArrayTypes, string FromUser) {
            return base.Channel.GetInterventiCountByCriteriaExAsync(Criteria, Limit, ArrayValues, ArrayTypes, FromUser);
        }
        
        public System.Data.DataSet GetInterventiAperti(string IDCliente, string FromUser) {
            return base.Channel.GetInterventiAperti(IDCliente, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInterventiApertiAsync(string IDCliente, string FromUser) {
            return base.Channel.GetInterventiApertiAsync(IDCliente, FromUser);
        }
        
        public System.Data.DataSet GetStatistiche(System.DateTime MinDate, System.DateTime MaxDate, string FromUser) {
            return base.Channel.GetStatistiche(MinDate, MaxDate, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStatisticheAsync(System.DateTime MinDate, System.DateTime MaxDate, string FromUser) {
            return base.Channel.GetStatisticheAsync(MinDate, MaxDate, FromUser);
        }
        
        public System.Data.DataSet GetParkingXML() {
            return base.Channel.GetParkingXML();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetParkingXMLAsync() {
            return base.Channel.GetParkingXMLAsync();
        }
        
        public System.Data.DataSet GetParking(string User, long IDDitta, System.DateTime DataOraModifica) {
            return base.Channel.GetParking(User, IDDitta, DataOraModifica);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetParkingAsync(string User, long IDDitta, System.DateTime DataOraModifica) {
            return base.Channel.GetParkingAsync(User, IDDitta, DataOraModifica);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MegatowerWeb.MegatowerService.CertificateResponse MegatowerWeb.MegatowerService.ServiziMegaTowerSoap.Certificate(MegatowerWeb.MegatowerService.CertificateRequest request) {
            return base.Channel.Certificate(request);
        }
        
        public MegatowerWeb.MegatowerService.Result Certificate(byte[] Bytes) {
            MegatowerWeb.MegatowerService.CertificateRequest inValue = new MegatowerWeb.MegatowerService.CertificateRequest();
            inValue.Bytes = Bytes;
            MegatowerWeb.MegatowerService.CertificateResponse retVal = ((MegatowerWeb.MegatowerService.ServiziMegaTowerSoap)(this)).Certificate(inValue);
            return retVal.CertificateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.CertificateResponse> MegatowerWeb.MegatowerService.ServiziMegaTowerSoap.CertificateAsync(MegatowerWeb.MegatowerService.CertificateRequest request) {
            return base.Channel.CertificateAsync(request);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.CertificateResponse> CertificateAsync(byte[] Bytes) {
            MegatowerWeb.MegatowerService.CertificateRequest inValue = new MegatowerWeb.MegatowerService.CertificateRequest();
            inValue.Bytes = Bytes;
            return ((MegatowerWeb.MegatowerService.ServiziMegaTowerSoap)(this)).CertificateAsync(inValue);
        }
        
        public System.Data.DataSet GetTipoInterventi(string FromUser) {
            return base.Channel.GetTipoInterventi(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTipoInterventiAsync(string FromUser) {
            return base.Channel.GetTipoInterventiAsync(FromUser);
        }
        
        public System.Data.DataSet GetDettaglioInterventi(string FromUser) {
            return base.Channel.GetDettaglioInterventi(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDettaglioInterventiAsync(string FromUser) {
            return base.Channel.GetDettaglioInterventiAsync(FromUser);
        }
        
        public System.Data.DataSet GetTipoContatto(string FromUser) {
            return base.Channel.GetTipoContatto(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTipoContattoAsync(string FromUser) {
            return base.Channel.GetTipoContattoAsync(FromUser);
        }
        
        public System.Data.DataSet GetTipoClienti(string FromUser) {
            return base.Channel.GetTipoClienti(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTipoClientiAsync(string FromUser) {
            return base.Channel.GetTipoClientiAsync(FromUser);
        }
        
        public System.Data.DataSet GetTipoAttivita(string FromUser) {
            return base.Channel.GetTipoAttivita(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTipoAttivitaAsync(string FromUser) {
            return base.Channel.GetTipoAttivitaAsync(FromUser);
        }
        
        public System.Data.DataSet GetStatus() {
            return base.Channel.GetStatus();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStatusAsync() {
            return base.Channel.GetStatusAsync();
        }
        
        public System.Data.DataSet GetUser(string User) {
            return base.Channel.GetUser(User);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUserAsync(string User) {
            return base.Channel.GetUserAsync(User);
        }
        
        public System.Data.DataSet Login(string User, string CryptPassword, string SoftwareName, string SoftwareVersion) {
            return base.Channel.Login(User, CryptPassword, SoftwareName, SoftwareVersion);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> LoginAsync(string User, string CryptPassword, string SoftwareName, string SoftwareVersion) {
            return base.Channel.LoginAsync(User, CryptPassword, SoftwareName, SoftwareVersion);
        }
        
        public System.Data.DataSet Logout(string User) {
            return base.Channel.Logout(User);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> LogoutAsync(string User) {
            return base.Channel.LogoutAsync(User);
        }
        
        public System.Data.DataSet GetAreas(string FromUser) {
            return base.Channel.GetAreas(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAreasAsync(string FromUser) {
            return base.Channel.GetAreasAsync(FromUser);
        }
        
        public System.Data.DataSet GetUsers(string FromUser) {
            return base.Channel.GetUsers(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUsersAsync(string FromUser) {
            return base.Channel.GetUsersAsync(FromUser);
        }
        
        public System.Data.DataSet GetFile(long ID, string FromUser) {
            return base.Channel.GetFile(ID, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFileAsync(long ID, string FromUser) {
            return base.Channel.GetFileAsync(ID, FromUser);
        }
        
        public System.Data.DataSet GetFilesList(string IDHotline, string FromUser) {
            return base.Channel.GetFilesList(IDHotline, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFilesListAsync(string IDHotline, string FromUser) {
            return base.Channel.GetFilesListAsync(IDHotline, FromUser);
        }
        
        public System.Data.DataSet GetFilesListByIDCliente(string IDCliente, string FromUser) {
            return base.Channel.GetFilesListByIDCliente(IDCliente, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFilesListByIDClienteAsync(string IDCliente, string FromUser) {
            return base.Channel.GetFilesListByIDClienteAsync(IDCliente, FromUser);
        }
        
        public System.Data.DataSet GetFilesListByGuid(string GuidTicket, string FromUser) {
            return base.Channel.GetFilesListByGuid(GuidTicket, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFilesListByGuidAsync(string GuidTicket, string FromUser) {
            return base.Channel.GetFilesListByGuidAsync(GuidTicket, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result RemoveFilesList(int[] IDList, long IDHotline, string FromUser) {
            return base.Channel.RemoveFilesList(IDList, IDHotline, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveFilesListAsync(int[] IDList, long IDHotline, string FromUser) {
            return base.Channel.RemoveFilesListAsync(IDList, IDHotline, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result UpdateFilesList(System.Data.DataSet dst, string FromUser) {
            return base.Channel.UpdateFilesList(dst, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateFilesListAsync(System.Data.DataSet dst, string FromUser) {
            return base.Channel.UpdateFilesListAsync(dst, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result AddIntervento(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.AddIntervento(Bytes, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> AddInterventoAsync(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.AddInterventoAsync(Bytes, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result UpDateStatistiche(int IDHotline) {
            return base.Channel.UpDateStatistiche(IDHotline);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpDateStatisticheAsync(int IDHotline) {
            return base.Channel.UpDateStatisticheAsync(IDHotline);
        }
        
        public MegatowerWeb.MegatowerService.Result RemoveRubrica(string Telefono, string FromUser) {
            return base.Channel.RemoveRubrica(Telefono, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveRubricaAsync(string Telefono, string FromUser) {
            return base.Channel.RemoveRubricaAsync(Telefono, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result AddRubrica(string FromUser, string OldTelefono, string Telefono, string IDCliente, string Riferimento, int IDTipoContatto, string Titolo, string Nome, string Cognome) {
            return base.Channel.AddRubrica(FromUser, OldTelefono, Telefono, IDCliente, Riferimento, IDTipoContatto, Titolo, Nome, Cognome);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> AddRubricaAsync(string FromUser, string OldTelefono, string Telefono, string IDCliente, string Riferimento, int IDTipoContatto, string Titolo, string Nome, string Cognome) {
            return base.Channel.AddRubricaAsync(FromUser, OldTelefono, Telefono, IDCliente, Riferimento, IDTipoContatto, Titolo, Nome, Cognome);
        }
        
        public System.Data.DataSet GetActivitiesByCodProgramma(string IDProgramma, string FromUser) {
            return base.Channel.GetActivitiesByCodProgramma(IDProgramma, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetActivitiesByCodProgrammaAsync(string IDProgramma, string FromUser) {
            return base.Channel.GetActivitiesByCodProgrammaAsync(IDProgramma, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result UpdateActivities(System.Data.DataSet Bytes, string FromUser, bool AutoAssign) {
            return base.Channel.UpdateActivities(Bytes, FromUser, AutoAssign);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateActivitiesAsync(System.Data.DataSet Bytes, string FromUser, bool AutoAssign) {
            return base.Channel.UpdateActivitiesAsync(Bytes, FromUser, AutoAssign);
        }
        
        public MegatowerWeb.MegatowerService.Result RemoveActivity(long ID, string FromUser) {
            return base.Channel.RemoveActivity(ID, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveActivityAsync(long ID, string FromUser) {
            return base.Channel.RemoveActivityAsync(ID, FromUser);
        }
        
        public System.Data.DataSet GetActivitiesByIDHotline(long IDHotline, string FromUser) {
            return base.Channel.GetActivitiesByIDHotline(IDHotline, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetActivitiesByIDHotlineAsync(long IDHotline, string FromUser) {
            return base.Channel.GetActivitiesByIDHotlineAsync(IDHotline, FromUser);
        }
        
        public System.Data.DataSet GetActivitiesByGuid(string GuidTicket, string FromUser) {
            return base.Channel.GetActivitiesByGuid(GuidTicket, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetActivitiesByGuidAsync(string GuidTicket, string FromUser) {
            return base.Channel.GetActivitiesByGuidAsync(GuidTicket, FromUser);
        }
        
        public System.Data.DataSet GetRubrica(string Telefono, string User) {
            return base.Channel.GetRubrica(Telefono, User);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRubricaAsync(string Telefono, string User) {
            return base.Channel.GetRubricaAsync(Telefono, User);
        }
        
        public System.Data.DataSet GetMailTemplates() {
            return base.Channel.GetMailTemplates();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMailTemplatesAsync() {
            return base.Channel.GetMailTemplatesAsync();
        }
        
        public System.Data.DataSet GetClienti(string Target, string FromUser, long IDDitta) {
            return base.Channel.GetClienti(Target, FromUser, IDDitta);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClientiAsync(string Target, string FromUser, long IDDitta) {
            return base.Channel.GetClientiAsync(Target, FromUser, IDDitta);
        }
        
        public System.Data.DataSet GetCompetenze(string FromUser) {
            return base.Channel.GetCompetenze(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompetenzeAsync(string FromUser) {
            return base.Channel.GetCompetenzeAsync(FromUser);
        }
        
        public System.Data.DataSet GetModuli(string FromUser, string IDCliente) {
            return base.Channel.GetModuli(FromUser, IDCliente);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetModuliAsync(string FromUser, string IDCliente) {
            return base.Channel.GetModuliAsync(FromUser, IDCliente);
        }
        
        public System.Data.DataSet GetModuliByIDProdotto(string FromUser, string IDProdotto) {
            return base.Channel.GetModuliByIDProdotto(FromUser, IDProdotto);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetModuliByIDProdottoAsync(string FromUser, string IDProdotto) {
            return base.Channel.GetModuliByIDProdottoAsync(FromUser, IDProdotto);
        }
        
        public System.Data.DataSet GetModuliByCliente(string IDCliente, string IDClienteContabile) {
            return base.Channel.GetModuliByCliente(IDCliente, IDClienteContabile);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetModuliByClienteAsync(string IDCliente, string IDClienteContabile) {
            return base.Channel.GetModuliByClienteAsync(IDCliente, IDClienteContabile);
        }
        
        public System.Data.DataSet GetModuliByClienteOrModulo(string IDCliente, string IDClienteContabile, int IDModulo) {
            return base.Channel.GetModuliByClienteOrModulo(IDCliente, IDClienteContabile, IDModulo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetModuliByClienteOrModuloAsync(string IDCliente, string IDClienteContabile, int IDModulo) {
            return base.Channel.GetModuliByClienteOrModuloAsync(IDCliente, IDClienteContabile, IDModulo);
        }
        
        public System.Data.DataSet GetRubricaByCliente(string IDCliente, string IDClienteContabile) {
            return base.Channel.GetRubricaByCliente(IDCliente, IDClienteContabile);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRubricaByClienteAsync(string IDCliente, string IDClienteContabile) {
            return base.Channel.GetRubricaByClienteAsync(IDCliente, IDClienteContabile);
        }
        
        public System.Data.DataSet GetCliente(string IDCliente) {
            return base.Channel.GetCliente(IDCliente);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClienteAsync(string IDCliente) {
            return base.Channel.GetClienteAsync(IDCliente);
        }
        
        public System.Data.DataSet GetClienteFull(string IDCliente) {
            return base.Channel.GetClienteFull(IDCliente);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClienteFullAsync(string IDCliente) {
            return base.Channel.GetClienteFullAsync(IDCliente);
        }
        
        public System.Data.DataSet GetAssegnazioni(long IDHotline) {
            return base.Channel.GetAssegnazioni(IDHotline);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAssegnazioniAsync(long IDHotline) {
            return base.Channel.GetAssegnazioniAsync(IDHotline);
        }
        
        public System.Data.DataSet GetAssegnazione(long ID) {
            return base.Channel.GetAssegnazione(ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAssegnazioneAsync(long ID) {
            return base.Channel.GetAssegnazioneAsync(ID);
        }
        
        public System.Data.DataSet GetProdotti(string FromUser, int IDModulo) {
            return base.Channel.GetProdotti(FromUser, IDModulo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetProdottiAsync(string FromUser, int IDModulo) {
            return base.Channel.GetProdottiAsync(FromUser, IDModulo);
        }
        
        public MegatowerWeb.MegatowerService.Result RemoveHotline(long IDHotline, string FromUser) {
            return base.Channel.RemoveHotline(IDHotline, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveHotlineAsync(long IDHotline, string FromUser) {
            return base.Channel.RemoveHotlineAsync(IDHotline, FromUser);
        }
        
        public System.Data.DataSet GetBookingLog(int IDHotline, string FromUser) {
            return base.Channel.GetBookingLog(IDHotline, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBookingLogAsync(int IDHotline, string FromUser) {
            return base.Channel.GetBookingLogAsync(IDHotline, FromUser);
        }
        
        public System.Data.DataSet GetVisibilita(string FromUser) {
            return base.Channel.GetVisibilita(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetVisibilitaAsync(string FromUser) {
            return base.Channel.GetVisibilitaAsync(FromUser);
        }
        
        public System.Data.DataSet GetClientiCommerciale(string FromUser, string Filter) {
            return base.Channel.GetClientiCommerciale(FromUser, Filter);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClientiCommercialeAsync(string FromUser, string Filter) {
            return base.Channel.GetClientiCommercialeAsync(FromUser, Filter);
        }
        
        public System.Data.DataSet GetBooking(string FromUser, long IDDitta, System.DateTime MinDate, System.DateTime MaxDate, string[] ListUsers, System.DateTime DataOraModifica) {
            return base.Channel.GetBooking(FromUser, IDDitta, MinDate, MaxDate, ListUsers, DataOraModifica);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetBookingAsync(string FromUser, long IDDitta, System.DateTime MinDate, System.DateTime MaxDate, string[] ListUsers, System.DateTime DataOraModifica) {
            return base.Channel.GetBookingAsync(FromUser, IDDitta, MinDate, MaxDate, ListUsers, DataOraModifica);
        }
        
        public System.Data.DataSet GetFolders() {
            return base.Channel.GetFolders();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFoldersAsync() {
            return base.Channel.GetFoldersAsync();
        }
        
        public System.Data.DataSet GetCausaStatus() {
            return base.Channel.GetCausaStatus();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCausaStatusAsync() {
            return base.Channel.GetCausaStatusAsync();
        }
        
        public System.Data.DataSet GetApplicativi(string FromUser) {
            return base.Channel.GetApplicativi(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetApplicativiAsync(string FromUser) {
            return base.Channel.GetApplicativiAsync(FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result AssignHotline(long IDHotline, string FromUser, string ToArea, string ToUser, System.DateTime DateTime, double OrePreviste, string Descrizione, long Alarm, long RememberMinutes) {
            return base.Channel.AssignHotline(IDHotline, FromUser, ToArea, ToUser, DateTime, OrePreviste, Descrizione, Alarm, RememberMinutes);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> AssignHotlineAsync(long IDHotline, string FromUser, string ToArea, string ToUser, System.DateTime DateTime, double OrePreviste, string Descrizione, long Alarm, long RememberMinutes) {
            return base.Channel.AssignHotlineAsync(IDHotline, FromUser, ToArea, ToUser, DateTime, OrePreviste, Descrizione, Alarm, RememberMinutes);
        }
        
        public MegatowerWeb.MegatowerService.Result ScheduleAssignHotline(long ID, string FromUser, long Alarm, long RememberMinutes, string IPAddress) {
            return base.Channel.ScheduleAssignHotline(ID, FromUser, Alarm, RememberMinutes, IPAddress);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> ScheduleAssignHotlineAsync(long ID, string FromUser, long Alarm, long RememberMinutes, string IPAddress) {
            return base.Channel.ScheduleAssignHotlineAsync(ID, FromUser, Alarm, RememberMinutes, IPAddress);
        }
        
        public MegatowerWeb.MegatowerService.Result ChangeAssignHotline(long ID, string FromUser, string ToArea, string ToUser, System.DateTime DateTime, double OrePreviste, string Descrizione, long Alarm, long RememberMinutes) {
            return base.Channel.ChangeAssignHotline(ID, FromUser, ToArea, ToUser, DateTime, OrePreviste, Descrizione, Alarm, RememberMinutes);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> ChangeAssignHotlineAsync(long ID, string FromUser, string ToArea, string ToUser, System.DateTime DateTime, double OrePreviste, string Descrizione, long Alarm, long RememberMinutes) {
            return base.Channel.ChangeAssignHotlineAsync(ID, FromUser, ToArea, ToUser, DateTime, OrePreviste, Descrizione, Alarm, RememberMinutes);
        }
        
        public MegatowerWeb.MegatowerService.Result RemoveAssignHotline(long ID, string FromUser) {
            return base.Channel.RemoveAssignHotline(ID, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RemoveAssignHotlineAsync(long ID, string FromUser) {
            return base.Channel.RemoveAssignHotlineAsync(ID, FromUser);
        }
        
        public System.Data.DataSet GetFiliazione(long IDHotline) {
            return base.Channel.GetFiliazione(IDHotline);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFiliazioneAsync(long IDHotline) {
            return base.Channel.GetFiliazioneAsync(IDHotline);
        }
        
        public System.Data.DataSet GetAsk() {
            return base.Channel.GetAsk();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAskAsync() {
            return base.Channel.GetAskAsync();
        }
        
        public System.Data.DataSet GetAnswer(int IDHotline, string FromUser) {
            return base.Channel.GetAnswer(IDHotline, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAnswerAsync(int IDHotline, string FromUser) {
            return base.Channel.GetAnswerAsync(IDHotline, FromUser);
        }
        
        public System.Data.DataSet GetAnswerByGuid(string GuidTicket, string FromUser) {
            return base.Channel.GetAnswerByGuid(GuidTicket, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAnswerByGuidAsync(string GuidTicket, string FromUser) {
            return base.Channel.GetAnswerByGuidAsync(GuidTicket, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result UpdateAnswer(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpdateAnswer(Bytes, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateAnswerAsync(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpdateAnswerAsync(Bytes, FromUser);
        }
        
        public System.Data.DataSet GetFoldersHistory(int IDHotline) {
            return base.Channel.GetFoldersHistory(IDHotline);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFoldersHistoryAsync(int IDHotline) {
            return base.Channel.GetFoldersHistoryAsync(IDHotline);
        }
        
        public System.Data.DataSet GetCausaStatusHistory(int IDHotline) {
            return base.Channel.GetCausaStatusHistory(IDHotline);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCausaStatusHistoryAsync(int IDHotline) {
            return base.Channel.GetCausaStatusHistoryAsync(IDHotline);
        }
        
        public System.Data.DataSet GetIntervento(string ID, long IDAssegnazione, string FromUser) {
            return base.Channel.GetIntervento(ID, IDAssegnazione, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInterventoAsync(string ID, long IDAssegnazione, string FromUser) {
            return base.Channel.GetInterventoAsync(ID, IDAssegnazione, FromUser);
        }
        
        public System.Data.DataSet GetNewIntervento(string FromUser) {
            return base.Channel.GetNewIntervento(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetNewInterventoAsync(string FromUser) {
            return base.Channel.GetNewInterventoAsync(FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result SwitchIntervento(string FromUser, string ToUser, string ID) {
            return base.Channel.SwitchIntervento(FromUser, ToUser, ID);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> SwitchInterventoAsync(string FromUser, string ToUser, string ID) {
            return base.Channel.SwitchInterventoAsync(FromUser, ToUser, ID);
        }
        
        public System.Data.DataSet GetSwitchLocked(string FromUser, long ID) {
            return base.Channel.GetSwitchLocked(FromUser, ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSwitchLockedAsync(string FromUser, long ID) {
            return base.Channel.GetSwitchLockedAsync(FromUser, ID);
        }
        
        public MegatowerWeb.MegatowerService.Result LockIntervento(string FromUser, string ID) {
            return base.Channel.LockIntervento(FromUser, ID);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> LockInterventoAsync(string FromUser, string ID) {
            return base.Channel.LockInterventoAsync(FromUser, ID);
        }
        
        public MegatowerWeb.MegatowerService.Result UnlockIntervento(string FromUser, string ID) {
            return base.Channel.UnlockIntervento(FromUser, ID);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UnlockInterventoAsync(string FromUser, string ID) {
            return base.Channel.UnlockInterventoAsync(FromUser, ID);
        }
        
        public MegatowerWeb.MegatowerService.Result AddMonitor(string FromUser, string Key) {
            return base.Channel.AddMonitor(FromUser, Key);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> AddMonitorAsync(string FromUser, string Key) {
            return base.Channel.AddMonitorAsync(FromUser, Key);
        }
        
        public MegatowerWeb.MegatowerService.Result UpdateIntervento(System.Data.DataSet ds, string FromUser, long IDAssegnazione) {
            return base.Channel.UpdateIntervento(ds, FromUser, IDAssegnazione);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateInterventoAsync(System.Data.DataSet ds, string FromUser, long IDAssegnazione) {
            return base.Channel.UpdateInterventoAsync(ds, FromUser, IDAssegnazione);
        }
        
        public MegatowerWeb.MegatowerService.Result CloseAssegnazione(long IDAssegnazione, long Tipo, string FromUser, string IndirizzoIP) {
            return base.Channel.CloseAssegnazione(IDAssegnazione, Tipo, FromUser, IndirizzoIP);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> CloseAssegnazioneAsync(long IDAssegnazione, long Tipo, string FromUser, string IndirizzoIP) {
            return base.Channel.CloseAssegnazioneAsync(IDAssegnazione, Tipo, FromUser, IndirizzoIP);
        }
        
        public MegatowerWeb.MegatowerService.Result ReorganizerAssegnazioni(string User, string FromUser) {
            return base.Channel.ReorganizerAssegnazioni(User, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> ReorganizerAssegnazioniAsync(string User, string FromUser) {
            return base.Channel.ReorganizerAssegnazioniAsync(User, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result ReorganizerAssegnazioniUsers(string[] ListUsers, string FromUser) {
            return base.Channel.ReorganizerAssegnazioniUsers(ListUsers, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> ReorganizerAssegnazioniUsersAsync(string[] ListUsers, string FromUser) {
            return base.Channel.ReorganizerAssegnazioniUsersAsync(ListUsers, FromUser);
        }
        
        public System.Data.DataSet GetPriorities(string FromUser, int IDHotline) {
            return base.Channel.GetPriorities(FromUser, IDHotline);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPrioritiesAsync(string FromUser, int IDHotline) {
            return base.Channel.GetPrioritiesAsync(FromUser, IDHotline);
        }
        
        public System.Data.DataSet GetResource(int ID, string FromUser) {
            return base.Channel.GetResource(ID, FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetResourceAsync(int ID, string FromUser) {
            return base.Channel.GetResourceAsync(ID, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result UpdateResource(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpdateResource(Bytes, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateResourceAsync(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpdateResourceAsync(Bytes, FromUser);
        }
        
        public System.Data.DataSet GetViste(string FromUser) {
            return base.Channel.GetViste(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetVisteAsync(string FromUser) {
            return base.Channel.GetVisteAsync(FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result UpdateViste(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpdateViste(Bytes, FromUser);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> UpdateVisteAsync(System.Data.DataSet Bytes, string FromUser) {
            return base.Channel.UpdateVisteAsync(Bytes, FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result RecalcPriority(string FromUser, int IDHotline) {
            return base.Channel.RecalcPriority(FromUser, IDHotline);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> RecalcPriorityAsync(string FromUser, int IDHotline) {
            return base.Channel.RecalcPriorityAsync(FromUser, IDHotline);
        }
        
        public System.Data.DataSet GetLivelli(string FromUser) {
            return base.Channel.GetLivelli(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLivelliAsync(string FromUser) {
            return base.Channel.GetLivelliAsync(FromUser);
        }
        
        public System.Data.DataSet GetKeyWords(string FromUser) {
            return base.Channel.GetKeyWords(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetKeyWordsAsync(string FromUser) {
            return base.Channel.GetKeyWordsAsync(FromUser);
        }
        
        public System.Data.DataSet GetDitte(string FromUser) {
            return base.Channel.GetDitte(FromUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDitteAsync(string FromUser) {
            return base.Channel.GetDitteAsync(FromUser);
        }
        
        public MegatowerWeb.MegatowerService.Result SendEmail(string FromUser, MegatowerWeb.MegatowerService.MegaMessage Message, int IDHotline) {
            return base.Channel.SendEmail(FromUser, Message, IDHotline);
        }
        
        public System.Threading.Tasks.Task<MegatowerWeb.MegatowerService.Result> SendEmailAsync(string FromUser, MegatowerWeb.MegatowerService.MegaMessage Message, int IDHotline) {
            return base.Channel.SendEmailAsync(FromUser, Message, IDHotline);
        }
        
        public System.Data.DataSet GetDocumenti(string FromUser, int IDHotline) {
            return base.Channel.GetDocumenti(FromUser, IDHotline);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDocumentiAsync(string FromUser, int IDHotline) {
            return base.Channel.GetDocumentiAsync(FromUser, IDHotline);
        }
    }
}
